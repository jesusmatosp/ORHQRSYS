package pe.gob.onp.orrhh.qr.reportes;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.util.ArrayList;
import java.util.List;

import com.itextpdf.text.Anchor;
import com.itextpdf.text.BadElementException;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chapter;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.Section;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import pe.gob.onp.orrhh.qr.bean.DetailReporteResumenBean;
import pe.gob.onp.orrhh.qr.bean.ReporteDetalladoBean;
import pe.gob.onp.orrhh.qr.bean.ReporteResumenBean;
import pe.gob.onp.orrhh.qr.dto.PersonaDTO;

public class ReportePdfWriter {
	
	private static String[] columns = {"#", "Cod Evento", "DNI", "Ape. Paterno", "Ape. Materno", "Nombres",  "Sexo", "Edad", "Puesto", "Regimen", "Area Operativa"};
	private static Font catFont = new Font(Font.FontFamily.TIMES_ROMAN, 18, Font.BOLD);
    private static Font redFont = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.NORMAL, BaseColor.RED);
    private static Font subFont = new Font(Font.FontFamily.TIMES_ROMAN, 16, Font.BOLD);
    private static Font smallBold = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD);
	private ReporteDetalladoBean reporte;
	
	public ReportePdfWriter(ReporteDetalladoBean reporte) {
		this.reporte = reporte;
	}
	
	public ReportePdfWriter() {
		
	}
	
	private ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();

	public byte[] generarReporteDetalladoPDF() {
		byte[] pdfBytes = null;
		Document document = new Document();
		// document.setPageSize(PageSize.A4.rotate());
		
		Rectangle one = new Rectangle(1500, 800);
		// Rectangle two = new Rectangle(700,400);
		
		document.setPageSize(one);
		document.setMargins(10, 10, 10, 10);
		
		try {
			String path = new File(".").getCanonicalPath();
        	// String FILE_NAME = path + "/itext-test-file.pdf";
        	// PdfWriter.getInstance(document, new FileOutputStream(new File(FILE_NAME)));
        	PdfWriter.getInstance(document, byteArrayOutputStream);
            document.open();
            addTitlePage(document);
            addMetaData(document);
          //  addContent(document);
            
            createTable(document);
            document.close();
            
            pdfBytes = byteArrayOutputStream.toByteArray();
        } catch (Exception e) {
            e.printStackTrace();
        }
		return pdfBytes;
	}
	
	private void addMetaData(Document document) {
        document.addTitle("Reporte Detallado de Asistencia - ONP");
        document.addSubject("Sistema de Asistencia - QR - ONP");
        document.addKeywords("ONP, Asistencia, QR, Perú");
        document.addAuthor("ONP");
        document.addCreator("ONP");
    }
	
	private static void addTitlePage(Document document)
            throws DocumentException {
        Paragraph preface = new Paragraph();
        // We add one empty line
        addEmptyLine(preface, 1);
        // Lets write a big header
        preface.add(new Paragraph("Oficina de Normalización Previsional (ONP) - Dpto. RRHH", smallBold));
        // Will create: Report generated by: _name, _date
        preface.add(new Paragraph("Reporte de Asistencia Detallada", //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
        		catFont));
        addEmptyLine(preface, 3);
        document.add(preface);
    }
	
	private void addContent(Document document) throws DocumentException {
//        Anchor anchor = new Anchor("Reporte Detalle Persona", catFont);
//        anchor.setName("Reporte Detalle Persona");
//        // Second parameter is the number of the chapter
//        Chapter catPart = new Chapter(new Paragraph(anchor), 1);
//        Paragraph subPara = new Paragraph("Reporte Detalle Persona", subFont);
//        Section subCatPart = catPart.addSection(subPara);
//        // add a table
//       // createTable(subCatPart);
//        // now add all this to the document
//        document.add(catPart);
    }
	
	private static void addEmptyLine(Paragraph paragraph, int number) {
        for (int i = 0; i < number; i++) {
            paragraph.add(new Paragraph(" "));
        }
    }
	
	private void createTable(Document document) throws DocumentException {
		// Crear Columnas:
		List<String> c = new ArrayList<String>();
		for (int i = 0; i < columns.length; i++) {
			c.add(columns[i]);
		}
		// columnas dinamicas:
		for (String _columnas : reporte.getColumnas()) {
			c.add(_columnas);
		}
		c.add("Reg x Persona");
		
        PdfPTable table = new PdfPTable(c.size());
        table.setWidthPercentage(100f);
        // Create cells
       
        for(int i = 0; i < c.size(); i++) {
        	PdfPCell c1 = new PdfPCell(new Phrase(c.get(i).toString()));
            c1.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(c1);
        }
        table.setHeaderRows(1);
        
        int rowNum = 1;
        List<ReporteResumenBean> lstResumen = reporte.getData();
        
        for(ReporteResumenBean resumen: lstResumen) {   
        	PersonaDTO personaDTO = resumen.getPersona();
        	table.addCell("" + rowNum);
        	table.addCell("" + resumen.getIdEvento());
        	table.addCell(personaDTO.getDni());
        	table.addCell(personaDTO.getApellidoPaterno());
        	table.addCell(personaDTO.getApellidoMaterno());
        	table.addCell(personaDTO.getNombres());
        	table.addCell(personaDTO.getSexo());
        	table.addCell(personaDTO.getEdad().substring(0,2));
        	table.addCell(personaDTO.getPuesto());
        	table.addCell(personaDTO.getRegimen());
        	table.addCell(personaDTO.getAreaCorporativa());
        	List<DetailReporteResumenBean> lstDetalle = resumen.getDetalle();
            for(DetailReporteResumenBean detalle: lstDetalle) {
            	table.addCell(detalle.getAsistencia());
            }
        	table.addCell("" + resumen.getTotalAsistido());
		    rowNum++;
        }
        document.add(table);
    }

	public ReporteDetalladoBean getReporte() {
		return reporte;
	}

	public void setReporte(ReporteDetalladoBean reporte) {
		this.reporte = reporte;
	}
}
